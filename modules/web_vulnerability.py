#!/usr/bin/env python3

import requests
import subprocess
import sys
import os
from core.utils import *
from core.config import *

class WebVulnerabilityScanner:
    def __init__(self):
        self.tools = {
            "custom_scanner": "Built-in web vulnerability scanner",
            "xsser": "Automatic XSS detection tool",
            "commix": "Command injection testing tool",
            "wpscan": "WordPress security scanner",
            "dirb": "Web content scanner"
        }
    
    def custom_web_scan(self):
        """Built-in web vulnerability scanner"""
        banner("Custom Web Vulnerability Scanner")
        
        url = get_user_input("Enter target URL (e.g., https://example.com)")
        if not url.startswith(('http://', 'https://')):
            url = 'https://' + url
        
        console.print("\n[bold cyan]Scan components:[/bold cyan]")
        console.print("  1. SQL Injection testing")
        console.print("  2. XSS testing")
        console.print("  3. Path traversal testing")
        console.print("  4. Sensitive file discovery")
        console.print("  5. All of the above")
        
        scan_choice = get_user_input("Choose scan type (1-5)", choices=["1", "2", "3", "4", "5"])
        
        info(f"Testing URL: {url}")
        
        if scan_choice in ["1", "5"]:
            self.test_sql_injection(url)
        if scan_choice in ["2", "5"]:
            self.test_xss(url)
        if scan_choice in ["3", "5"]:
            self.test_path_traversal(url)
        if scan_choice in ["4", "5"]:
            self.discover_sensitive_files(url)
        
        show_next_steps("Web Vulnerability Assessment", CATEGORIES["web_vuln"]["next_steps"])
    
    def test_sql_injection(self, url):
        """Test for SQL injection vulnerabilities"""
        console.print("\n[bold yellow]üîç Testing SQL Injection...[/bold yellow]")
        
        payloads = [
            "' OR 1=1 --",
            "' OR 'a'='a",
            "admin' --",
            "' UNION SELECT NULL, NULL --",
            "1' AND (SELECT COUNT(*) FROM information_schema.tables)>0 --",
            "' OR SLEEP(5) --"
        ]
        
        indicators = [
            "sql", "mysql", "syntax error", "unclosed quotation", 
            "ORA-", "SQLite", "error in your SQL syntax", "mysql_fetch"
        ]
        
        self.test_payloads(url, payloads, indicators, "SQL Injection")
    
    def test_xss(self, url):
        """Test for XSS vulnerabilities"""
        console.print("\n[bold yellow]üîç Testing XSS...[/bold yellow]")
        
        payloads = [
            "<script>alert('XSS')</script>",
            "<img src=x onerror=alert('XSS')>",
            "<svg/onload=alert('XSS')>",
            "javascript:alert('XSS')",
            "'><script>alert('XSS')</script>",
            "\"><script>alert('XSS')</script>"
        ]
        
        indicators = ["<script>", "alert(", "onerror=", "<svg", "javascript:"]
        
        self.test_payloads(url, payloads, indicators, "XSS")
    
    def test_path_traversal(self, url):
        """Test for path traversal vulnerabilities"""
        console.print("\n[bold yellow]üîç Testing Path Traversal...[/bold yellow]")
        
        payloads = [
            "../../../etc/passwd",
            "..\\..\\..\\windows\\system32\\drivers\\etc\\hosts",
            "/etc/passwd",
            "....//....//....//etc/passwd",
            "%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd"
        ]
        
        indicators = ["root:", "daemon:", "bin:", "sys:", "[boot loader]"]
        
        self.test_payloads(url, payloads, indicators, "Path Traversal")
    
    def discover_sensitive_files(self, url):
        """Discover sensitive files and directories"""
        console.print("\n[bold yellow]üîç Discovering Sensitive Files...[/bold yellow]")
        
        if not url.endswith("/"):
            url += "/"
        
        sensitive_paths = [
            "admin", "admin/login.php", "administrator", "backup", "private", 
            "uploads", "api", "logs", "cache", "server-status", "dashboard",
            ".env", "config.php", "wp-config.php", "database.sql", "backup.sql",
            ".git", ".svn", "robots.txt", "sitemap.xml", "phpinfo.php"
        ]
        
        for path in sensitive_paths:
            full_url = url + path
            try:
                response = requests.get(full_url, headers=headers, timeout=10)
                if response.status_code == 200:
                    Success(f"[Sensitive File Discovery] Found: /{path} (Status: {response.status_code})")
                elif response.status_code in [301, 302]:
                Warning(f"[Sensitive File Discovery] Redirect: /{path} (Status: {response.status_code})")
        except requests.RequestException:
                pass
    
    def test_payloads(self, url, payloads, indicators, vuln_type):
        """Generic payload testing function"""
        try:
            # Get original response for comparison
            original_response = requests.get(url, headers=headers, timeout=10)
            original_content = original_response.text.lower()
        except requests.RequestException as e:
            Warning(f"Could not get original response: {e}")
            return
        
        for payload in payloads:
            try:
                # Test GET parameter injection
                test_url = f"{url}?id={payload}&search={payload}&q={payload}"
                response = requests.get(test_url, headers=headers, timeout=10)
                
                for indicator in indicators:
                    if indicator.lower() in response.text.lower() and indicator.lower() not in original_content:
                        Success(f"[{vuln_type}] Possible vulnerability found!")
                        Success(f"  Payload: {payload}")
                        Success(f"  Indicator: {indicator}")
                        Success(f"  URL: {test_url}")
                        break
                        
        except requests.RequestException:
                pass
    
    def run_xsser(self):
        """XSSer - Automatic XSS detection"""
        banner("XSSer - Cross Site Scripting Detection")
        
        target = get_user_input("Enter target URL (e.g., https://example.com/search?q=test)")
        
        console.print("\n[bold cyan]XSSer options:[/bold cyan]")
        console.print("  1. Basic XSS scan")
        console.print("  2. Detailed scan with fuzzing")
        console.print("  3. POST method testing")
        
        scan_choice = get_user_input("Choose scan type (1-3)", choices=["1", "2", "3"])
        
        if scan_choice == "1":
            command = f"xsser -u '{target}'"
        elif scan_choice == "2":
            command = f"xsser -u '{target}' --Fp --Fr --Fx"
        else:  # POST
            post_data = get_user_input("Enter POST data (e.g., 'param1=value1&param2=XSS')")
            command = f"xsser -u '{target}' -p '{post_data}'"
        
        console.print(f"\n[bold yellow]Command:[/bold yellow] {command}")
        
        console.print(f"\n[bold green]Executing: {command}[/bold green]")
            try:
            result = subprocess.run(command, shell=True, capture_output=True, text=True, timeout=300)
            if result.stdout:
                console.print("\n[bold green]Results:[/bold green]")
                console.print(result.stdout)
                if result.stderr:
                Warning(f"Errors: {result.stderr}")
        except subprocess.TimeoutExpired:
            Warning("Command timed out after 5 minutes")
        except Exception as e:
            Warning(f"Error executing command: {e}")
        
        show_next_steps("Web Vulnerability Assessment", CATEGORIES["web_vuln"]["next_steps"])
    
    def run_wpscan(self):
        """WPScan - WordPress security scanner"""
        banner("WPScan - WordPress Security Scanner")
        
        target = get_user_input("Enter WordPress site URL (e.g., https://example.com)")
        if not target.startswith(('http://', 'https://')):
            target = 'https://' + target
        
        console.print("\n[bold cyan]WPScan options:[/bold cyan]")
        console.print("  1. Basic vulnerability scan")
        console.print("  2. Enumerate users")
        console.print("  3. Enumerate plugins")
        console.print("  4. Enumerate themes")
        console.print("  5. Comprehensive scan")
        
        scan_choice = get_user_input("Choose scan type (1-5)", choices=["1", "2", "3", "4", "5"])
        
        base_command = f"wpscan --url {target}"
        
        if scan_choice == "1":
            command = base_command
        elif scan_choice == "2":
            command = f"{base_command} --enumerate u"
        elif scan_choice == "3":
            command = f"{base_command} --enumerate p"
        elif scan_choice == "4":
            command = f"{base_command} --enumerate t"
        else:  # comprehensive
            command = f"{base_command} --enumerate u,p,t,tt,cb,dbe"
        
        console.print(f"\n[bold yellow]Command:[/bold yellow] {command}")
        
        console.print(f"\n[bold green]Executing: {command}[/bold green]")
            try:
            result = subprocess.run(command.split(), capture_output=True, text=True, timeout=600)
            if result.stdout:
                console.print("\n[bold green]Results:[/bold green]")
                console.print(result.stdout)
                if result.stderr:
                Warning(f"Errors: {result.stderr}")
        except subprocess.TimeoutExpired:
            Warning("Command timed out after 10 minutes")
        except Exception as e:
            Warning(f"Error executing command: {e}")
        
        show_next_steps("Web Vulnerability Assessment", CATEGORIES["web_vuln"]["next_steps"])
    
    def display_menu(self):
        """Display web vulnerability scanner menu"""
        clear()
        Title("Web Vulnerability Assessment Toolkit")
        
        console.print(DISCLAIMER)
        Continue()
        
        display_tools_table("Web Vulnerability", self.tools)
        
        console.print("\n[bold cyan]Available Tools:[/bold cyan]")
        console.print("  1. Custom Web Vulnerability Scanner")
        console.print("  2. XSSer - XSS detection tool")
        console.print("  3. WPScan - WordPress security scanner")
        console.print("  4. Back to main menu")
        
        choice = get_user_input("Select tool (1-4)", choices=["1", "2", "3", "4"])
        
        if choice == "1":
            self.custom_web_scan()
        elif choice == "2":
            self.run_xsser()
        elif choice == "3":
            self.run_wpscan()
        elif choice == "4":
            return
        
        Continue()

def run():
    """Entry point for web vulnerability scanner"""
    scanner = WebVulnerabilityScanner()
    scanner.display_menu()